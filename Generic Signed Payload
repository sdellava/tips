---
tip: <to be assigned>
title: <Data Paload>
description: <Standard format of a Tangle block containing a data payload>
author: <Stefano Della Valle (@sdellava)>
discussions-to: <https://github.com/iotaledger/tips/discussions/100>
status: Draft
type: <Standard>
layer (*only required for Standards Track): <Core>
created: <2022-9-13>
requires (*optional): <TIP number(s)>
replaces (*optional): <TIP number(s)>
superseded-by (*optional): <TIP number(s)>
---

## Abstract

The payload concept offers a very flexible way to combine and encapsulate information in the IOTA protocol. 
This document proposes a basic Layer 1 payload type that include a layer 2 content type identification field.

## Motivation

IOTA provides the very useful feature of publishing no-cost blocks that may contain data. The registry thus becomes a reliable transport layer for sending data, i.e., a layer on which to base the design of applications that require maximum reliability in sending data.

Of course, the ledger cannot indefinitely hold all data that is published, so nodes must remove these blocks from their databases.

This in part nullifies the advantage of the network for the transmission of critical data because the receiver has to worry about always being listening and not missing any message intended for him. 

There are three critical points in the current system:
- using a permanode to store all traffic is too expensive
- receiving and analyzing all traffic with a layer 2 application is potentially very expensive anyway
- using the tag field as a discrinant only partially solves the problem because anyone can post messages with that tag, forcing the application to perform an application check.

One possible solution is to sign every message entered. Nodes do not have to check the signature, so there would be no impact on the network, but this would allow a generic layer 2 application to understand that the message is invalid without even getting into the meaning of the payload. Spam messages would be easily discarded minimizing the overload on the Layer 2 application.

This solution has not been accepted by the developer community, which is essentially asking for the signature to be included in the Layer 2 payload.

This option is certainly viable, but since each Layer 2 application has its own payload format, in order to avoid errors, ambiguity, confusion, to simplify the applications themselves and to reduce as much as possible the effort of Layer 2 applications in validating their messages, it is desirable to at least introduce an "applciation type" field at Layer 1, the equivalent of the "protocol" field of the IP network protocol.

An application receiving the block stream from the node can easily apply a filter and choose only the blocks of the Data Payload type and then choose only those that have a specific the Payload Type. 
Finally, each payload type will have its own structure described in appropriate TIPs: the receiving application can either apply payload validation logic and process it, or discard the block if the payload is invalid.


## Specification

Detailed design

Serialized Layout

The following table describes the serialization of Data field of a _Data Payload_ following the notation from [TIP-21](../TIP-0021/tip-0021.md):

| Name                 | Type              | Description                                                                               |
|----------------------|-------------------|-------------------------------------------------------------------------------------------|
| Payload Type         | uint32            | Set to *value N* (where N is to be defined) to denote an _Data Payload_.                  |
| Layer 2 Payload type | unit32            | Set to a value according the Layer 2 Payload type table.                                             |
| Data                 | (uint32)ByteArray | Binary data. A leading uint32 denotes its length.                                         |


Layer 2 Payload type table

| Value        | Description                                                                               |
|--------------|-------------------------------------------------------------------------------------------|
| 0            | Generic unstructured payload                                                              |
| 1            | Tagged Data Payload (can replace the Layer 1 Tagged Payload)                              |
| 2            | Tagged Signed Data Payload                                                                |
| 3            | Distributed Identity application payload                                                  |
| 4            | STREAMS payload                                                                           |

Other Values type can be added on request.

## Rationale
This is a very simple soltution to allow to build Layer 2 applications that discriminate the Layer 1 content and discard any block not cointaining useful data.

## Backwards Compatibility
Not relevant

## Test Cases


## Copyright
Copyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).
